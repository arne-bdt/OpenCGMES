openapi: 3.1.0
info:
  title: OpenCGMES API (Draft)
  description: |
    API for managing CGMES data, including SPARQL queries, SHACL validation, and delta-based editing.
    This API supports the Common Grid Model Exchange Standard (CGMES) based on IEC 61970 CIM RDF format.
  version: 1.0.0
  contact:
    name: OpenCGMES Support
  license:
    name: Apache License 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

servers:
  - url: 'https://{server}/api/v1'
    variables:
      server:
        default: localhost:8080
        description: API Server

tags:
  - name: Repository
    description: Repository management operations
  - name: Model
    description: CGMES model operations
  - name: SPARQL
    description: SPARQL query and update operations
  - name: SHACL
    description: SHACL validation operations
  - name: Branch
    description: Delta-based editing branch operations
  - name: Events
    description: MQTT event subscription management

paths:
  #
  # Repository Management
  #
  /repository:
    get:
      tags:
        - Repository
      summary: List all repositories
      description: Returns a list of all available repositories
      operationId: listRepositories
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Repository'

  /repository/{repoType}:
    get:
      tags:
        - Repository
      summary: Get repository details
      description: Returns details of a specific repository
      operationId: getRepository
      parameters:
        - name: repoType
          in: path
          description: Type of repository
          required: true
          schema:
            type: string
            enum: [schema, instance, header, shacl]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '404':
          description: Repository not found

  /repository/{repoType}/graph:
    get:
      tags:
        - Repository
      summary: List all graphs in repository
      description: Returns a list of all graphs in a specific repository
      operationId: listRepositoryGraphs
      parameters:
        - name: repoType
          in: path
          description: Type of repository
          required: true
          schema:
            type: string
            enum: [schema, instance, header, shacl]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Graph'
        '404':
          description: Repository not found

  /repository/{repoType}/query:
    get:
      tags:
        - Repository
        - SPARQL
      summary: Query repository with SPARQL
      description: Execute a SPARQL query against a specific repository
      operationId: queryRepository
      parameters:
        - name: repoType
          in: path
          description: Type of repository
          required: true
          schema:
            type: string
            enum: [schema, instance, header, shacl]
        - name: query
          in: query
          description: SPARQL query string
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: Response format
          required: false
          schema:
            type: string
            enum: [json, xml, csv, turtle]
            default: json
      responses:
        '200':
          description: Successful operation
          content:
            application/sparql-results+json:
              schema:
                $ref: '#/components/schemas/SparqlResults'
            application/sparql-results+xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
        '400':
          description: Invalid SPARQL query
        '404':
          description: Repository not found
    post:
      tags:
        - Repository
        - SPARQL
      summary: Query repository with SPARQL (POST)
      description: Execute a SPARQL query against a specific repository using POST
      operationId: queryRepositoryPost
      parameters:
        - name: repoType
          in: path
          description: Type of repository
          required: true
          schema:
            type: string
            enum: [schema, instance, header, shacl]
        - name: format
          in: query
          description: Response format
          required: false
          schema:
            type: string
            enum: [json, xml, csv, turtle]
            default: json
      requestBody:
        required: true
        content:
          application/sparql-query:
            schema:
              type: string
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                query:
                  type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/sparql-results+json:
              schema:
                $ref: '#/components/schemas/SparqlResults'
            application/sparql-results+xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
        '400':
          description: Invalid SPARQL query
        '404':
          description: Repository not found

  #
  # Model Operations
  #
  /model:
    get:
      tags:
        - Model
      summary: List all models
      description: Returns a list of all available models
      operationId: listModels
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Model'
    post:
      tags:
        - Model
      summary: Import a new model
      description: Imports a new CGMES model file or package
      operationId: importModel
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: CGMES file or ZIP package
      responses:
        '201':
          description: Model imported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '400':
          description: Invalid model file

  /model/{filename}:
    get:
      tags:
        - Model
      summary: Get model details
      description: Returns details of a specific model
      operationId: getModel
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '404':
          description: Model not found
    delete:
      tags:
        - Model
      summary: Delete model
      description: Deletes a specific model
      operationId: deleteModel
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Model deleted successfully
        '404':
          description: Model not found

  /model/{filename}/query:
    get:
      tags:
        - Model
        - SPARQL
      summary: Query model with SPARQL
      description: Execute a SPARQL query against a specific model
      operationId: queryModel
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: SPARQL query string
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: Response format
          required: false
          schema:
            type: string
            enum: [json, xml, csv, turtle]
            default: json
      responses:
        '200':
          description: Successful operation
          content:
            application/sparql-results+json:
              schema:
                $ref: '#/components/schemas/SparqlResults'
            application/sparql-results+xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
        '400':
          description: Invalid SPARQL query
        '404':
          description: Model not found
    post:
      tags:
        - Model
        - SPARQL
      summary: Query model with SPARQL (POST)
      description: Execute a SPARQL query against a specific model using POST
      operationId: queryModelPost
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: Response format
          required: false
          schema:
            type: string
            enum: [json, xml, csv, turtle]
            default: json
      requestBody:
        required: true
        content:
          application/sparql-query:
            schema:
              type: string
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                query:
                  type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/sparql-results+json:
              schema:
                $ref: '#/components/schemas/SparqlResults'
            application/sparql-results+xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
        '400':
          description: Invalid SPARQL query
        '404':
          description: Model not found

  /model/{filename}/validate:
    post:
      tags:
        - Model
        - SHACL
      summary: Validate model against SHACL files
      description: Validates a specific model against selected SHACL files
      operationId: validateModel
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shaclFiles:
                  type: array
                  items:
                    type: string
                  description: List of SHACL files to validate against
      responses:
        '200':
          description: Validation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '404':
          description: Model not found

  /model/{filename}/validation-results/{shaclFileName}:
    get:
      tags:
        - Model
        - SHACL
      summary: Get validation results
      description: Returns validation results for a specific model and SHACL file
      operationId: getValidationResults
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
        - name: shaclFileName
          in: path
          description: Name of the SHACL file
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: Response format
          required: false
          schema:
            type: string
            enum: [json, xml, turtle]
            default: json
        - name: includeValid
          in: query
          description: Whether to include valid nodes
          required: false
          schema:
            type: boolean
            default: false
        - name: severity
          in: query
          description: Filter by severity level
          required: false
          schema:
            type: string
            enum: [info, warning, violation]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResults'
        '404':
          description: Validation results not found

  /model/{filename}/mas/{masId}/query:
    get:
      tags:
        - Model
        - SPARQL
      summary: Query model with MAS filtering
      description: Execute a SPARQL query against a specific model, filtered by Modeling Authority Set
      operationId: queryModelWithMas
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
        - name: masId
          in: path
          description: Modeling Authority Set ID (comma-separated for multiple)
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: SPARQL query string
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: Response format
          required: false
          schema:
            type: string
            enum: [json, xml, csv, turtle]
            default: json
      responses:
        '200':
          description: Successful operation
          content:
            application/sparql-results+json:
              schema:
                $ref: '#/components/schemas/SparqlResults'
        '400':
          description: Invalid SPARQL query
        '404':
          description: Model or MAS not found

  #
  # Branch Operations
  #
  /model/{filename}/branch:
    get:
      tags:
        - Branch
      summary: List all branches
      description: Returns a list of all branches for a specific model
      operationId: listBranches
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Branch'
        '404':
          description: Model not found
    post:
      tags:
        - Branch
      summary: Create a new branch
      description: Creates a new branch for a specific model
      operationId: createBranch
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branchName:
                  type: string
                  description: Name of the new branch
                parentBranch:
                  type: string
                  description: Name of the parent branch (defaults to main)
                  default: main
      responses:
        '201':
          description: Branch created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
        '400':
          description: Invalid branch name
        '404':
          description: Model or parent branch not found

  /model/{filename}/branch/{branchName}:
    get:
      tags:
        - Branch
      summary: Get branch details
      description: Returns details of a specific branch
      operationId: getBranch
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: Name of the branch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
        '404':
          description: Branch not found
    delete:
      tags:
        - Branch
      summary: Delete branch
      description: Deletes a specific branch
      operationId: deleteBranch
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: Name of the branch
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Branch deleted successfully
        '404':
          description: Branch not found

  /model/{filename}/branch/{branchName}/query:
    get:
      tags:
        - Branch
        - SPARQL
      summary: Query branch with SPARQL
      description: Execute a SPARQL query against a specific branch
      operationId: queryBranch
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: Name of the branch
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: SPARQL query string
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: Response format
          required: false
          schema:
            type: string
            enum: [json, xml, csv, turtle]
            default: json
      responses:
        '200':
          description: Successful operation
          content:
            application/sparql-results+json:
              schema:
                $ref: '#/components/schemas/SparqlResults'
        '400':
          description: Invalid SPARQL query
        '404':
          description: Branch not found
    post:
      tags:
        - Branch
        - SPARQL
      summary: Query branch with SPARQL (POST)
      description: Execute a SPARQL query against a specific branch using POST
      operationId: queryBranchPost
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: Name of the branch
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: Response format
          required: false
          schema:
            type: string
            enum: [json, xml, csv, turtle]
            default: json
      requestBody:
        required: true
        content:
          application/sparql-query:
            schema:
              type: string
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                query:
                  type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/sparql-results+json:
              schema:
                $ref: '#/components/schemas/SparqlResults'
        '400':
          description: Invalid SPARQL query
        '404':
          description: Branch not found

  /model/{filename}/branch/{branchName}/update:
    post:
      tags:
        - Branch
        - SPARQL
      summary: Update branch with SPARQL
      description: Execute a SPARQL UPDATE operation on a specific branch
      operationId: updateBranch
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: Name of the branch
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/sparql-update:
            schema:
              type: string
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                update:
                  type: string
      responses:
        '204':
          description: Update successful
        '400':
          description: Invalid SPARQL update
        '404':
          description: Branch not found

  /model/{filename}/branch/{branchName}/validate:
    post:
      tags:
        - Branch
        - SHACL
      summary: Validate branch against SHACL files
      description: Validates a specific branch against selected SHACL files
      operationId: validateBranch
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: Name of the branch
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shaclFiles:
                  type: array
                  items:
                    type: string
                  description: List of SHACL files to validate against
      responses:
        '200':
          description: Validation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '404':
          description: Branch not found

  /model/{filename}/branch/{branchName}/validation-results/{shaclFileName}:
    get:
      tags:
        - Branch
        - SHACL
      summary: Get branch validation results
      description: Returns validation results for a specific branch and SHACL file
      operationId: getBranchValidationResults
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: Name of the branch
          required: true
          schema:
            type: string
        - name: shaclFileName
          in: path
          description: Name of the SHACL file
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: Response format
          required: false
          schema:
            type: string
            enum: [json, xml, turtle]
            default: json
        - name: includeValid
          in: query
          description: Whether to include valid nodes
          required: false
          schema:
            type: boolean
            default: false
        - name: severity
          in: query
          description: Filter by severity level
          required: false
          schema:
            type: string
            enum: [info, warning, violation]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResults'
        '404':
          description: Validation results not found

  /model/{filename}/branch/{branchName}/merge:
    post:
      tags:
        - Branch
      summary: Merge branch
      description: Merges a branch into another branch
      operationId: mergeBranch
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: Name of the source branch
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targetBranch:
                  type: string
                  description: Name of the target branch
                  default: main
                conflictStrategy:
                  type: string
                  description: Strategy for handling conflicts
                  enum: [auto, ours, theirs, manual]
                  default: auto
      responses:
        '200':
          description: Merge successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeResult'
        '409':
          description: Merge conflicts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeConflicts'
        '404':
          description: Branch not found

  /model/{filename}/branch/{branchName}/export:
    post:
      tags:
        - Branch
      summary: Export branch as CGMES files
      description: Exports a branch as standard CGMES files
      operationId: exportBranch
      parameters:
        - name: filename
          in: path
          description: Name of the model file
          required: true
          schema:
            type: string
        - name: branchName
          in: path
          description: Name of the branch
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                exportFormat:
                  type: string
                  description: Export format
                  enum: [xml, zip]
                  default: zip
                createNewMrids:
                  type: boolean
                  description: Whether to create new mRIDs for modified elements
                  default: true
                validateBeforeExport:
                  type: boolean
                  description: Whether to validate before export
                  default: true
                shaclFiles:
                  type: array
                  items:
                    type: string
                  description: SHACL files to validate against (if validateBeforeExport is true)
      responses:
        '200':
          description: Export successful
          content:
            application/zip:
              schema:
                type: string
                format: binary
            application/xml:
              schema:
                type: string
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '404':
          description: Branch not found

  #
  # Event Management
  #
  /events/subscribe:
    post:
      tags:
        - Events
      summary: Subscribe to MQTT events
      description: Creates a subscription to MQTT events
      operationId: subscribeEvents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                componentType:
                  type: string
                  description: Type of component to subscribe to
                  enum: [repository, view, branch, graph]
                componentId:
                  type: string
                  description: ID of the component to subscribe to (wildcards allowed)
                eventType:
                  type: string
                  description: Type of event to subscribe to (wildcards allowed)
                callback:
                  type: string
                  description: Callback URL for WebHook notifications (optional)
                  format: uri
                clientId:
                  type: string
                  description: Client ID for MQTT subscription
      responses:
        '201':
          description: Subscription created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: Invalid subscription request

  /events/subscriptions:
    get:
      tags:
        - Events
      summary: List subscriptions
      description: Returns a list of active event subscriptions
      operationId: listSubscriptions
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'

  /events/unsubscribe/{subscriptionId}:
    delete:
      tags:
        - Events
      summary: Unsubscribe from events
      description: Removes an event subscription
      operationId: unsubscribeEvents
      parameters:
        - name: subscriptionId
          in: path
          description: ID of the subscription
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Subscription removed
        '404':
          description: Subscription not found

components:
  schemas:
    Repository:
      type: object
      properties:
        type:
          type: string
          description: Repository type
          enum: [schema, instance, header, shacl]
        graphCount:
          type: integer
          description: Number of graphs in repository
        name:
          type: string
          description: Repository name
        description:
          type: string
          description: Repository description

    Graph:
      type: object
      properties:
        id:
          type: string
          description: Graph ID
        name:
          type: string
          description: Graph name
        type:
          type: string
          description: Graph type (e.g., cim:EQ, cim:TP)
        tripleCount:
          type: integer
          description: Number of triples in graph
        repositoryType:
          type: string
          description: Type of repository containing this graph

    Model:
      type: object
      properties:
        filename:
          type: string
          description: Original filename
        importedAt:
          type: string
          format: date-time
          description: Import timestamp
        profiles:
          type: array
          items:
            type: string
          description: List of profiles in the model
        mRIDs:
          type: object
          additionalProperties:
            type: string
          description: Map of profile types to Model.mRIDs
        modelingAuthoritySet:
          type: string
          description: Modeling Authority Set
        scenarioTime:
          type: string
          format: date-time
          description: Scenario time
        version:
          type: string
          description: Model version
        description:
          type: string
          description: Model description

    Branch:
      type: object
      properties:
        id:
          type: string
          description: Branch ID
        name:
          type: string
          description: Branch name
        parentBranch:
          type: string
          description: Parent branch name
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        lastModified:
          type: string
          format: date-time
          description: Last modification timestamp
        changeCount:
          type: integer
          description: Number of changes in branch
        model:
          type: string
          description: Model filename
        creator:
          type: string
          description: User who created the branch

    SparqlResults:
      type: object
      properties:
        head:
          type: object
          properties:
            vars:
              type: array
              items:
                type: string
              description: Variable names
        results:
          type: object
          properties:
            bindings:
              type: array
              items:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: [uri, literal, bnode]
                    value:
                      type: string
                    datatype:
                      type: string
                    "xml:lang":
                      type: string

    ValidationResponse:
      type: object
      properties:
        taskId:
          type: string
          description: Task ID for asynchronous validation
        status:
          type: string
          enum: [completed, in-progress, failed]
          description: Status of validation task
        conforms:
          type: boolean
          description: Whether the model conforms to SHACL constraints
        summary:
          type: object
          properties:
            violations:
              type: integer
              description: Number of violations
            warnings:
              type: integer
              description: Number of warnings
            infos:
              type: integer
              description: Number of infos
        shaclFiles:
          type: array
          items:
            type: string
          description: List of SHACL files used for validation

    ValidationResults:
      type: object
      properties:
        conforms:
          type: boolean
          description: Whether the model conforms to SHACL constraints
        results:
          type: array
          items:
            type: object
            properties:
              severity:
                type: string
                enum: [violation, warning, info]
              focusNode:
                type: string
                description: URI of the node that failed validation
              resultPath:
                type: string
                description: Property path that failed validation
              message:
                type: string
                description: Error message
              sourceShape:
                type: string
                description: URI of the SHACL shape that triggered the validation failure
        summary:
          type: object
          properties:
            violations:
              type: integer
              description: Number of violations
            warnings:
              type: integer
              description: Number of warnings
            infos:
              type: integer
              description: Number of infos

    MergeResult:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the merge was successful
        sourceBranch:
          type: string
          description: Source branch name
        targetBranch:
          type: string
          description: Target branch name
        changesApplied:
          type: integer
          description: Number of changes applied
        conflictsResolved:
          type: integer
          description: Number of conflicts resolved
        timestamp:
          type: string
          format: date-time
          description: Merge timestamp

    MergeConflicts:
      type: object
      properties:
        mergeId:
          type: string
          description: Merge operation ID
        sourceBranch:
          type: string
          description: Source branch name
        targetBranch:
          type: string
          description: Target branch name
        conflicts:
          type: array
          items:
            type: object
            properties:
              resourceId:
                type: string
                description: Resource mRID
              property:
                type: string
                description: Conflicting property
              sourceValue:
                type: string
                description: Value in source branch
              targetValue:
                type: string
                description: Value in target branch
              resolution:
                type: string
                enum: [source, target, custom, both]
                description: Suggested resolution
        resolutionUrl:
          type: string
          format: uri
          description: URL for submitting conflict resolutions

    Subscription:
      type: object
      properties:
        id:
          type: string
          description: Subscription ID
        componentType:
          type: string
          description: Component type
          enum: [repository, view, branch, graph]
        componentId:
          type: string
          description: Component ID
        eventType:
          type: string
          description: Event type
        mqttTopic:
          type: string
          description: MQTT topic for this subscription
        callback:
          type: string
          format: uri
          description: WebHook callback URL (if applicable)
        clientId:
          type: string
          description: Client ID for MQTT subscription
        createdAt:
          type: string
          format: date-time
          description: Subscription creation timestamp